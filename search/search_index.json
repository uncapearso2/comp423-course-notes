{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Ashley Pearson's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Ashley Pearson</li> <li>Reviewer: Mariana Rodriguez-Pacheco</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>GitHub Account</li> <li>Git Installed</li> <li>VS Code Installed</li> <li>Docker Installed</li> </ol>"},{"location":"tutorials/rust-setup/#git-github-setup","title":"Git &amp; GitHub Setup","text":""},{"location":"tutorials/rust-setup/#step-1-create-local-directory-get-started-with-git","title":"Step 1 Create Local Directory &amp; Get Started with Git","text":"<p>1.1: Open a terminal</p> <p>1.2: Create a new directory for the project</p> <pre><code>mkdir rust-hello-comp423\ncd rust-hello-comp423\n</code></pre> <p>1.3: Initialize Git repo</p> <pre><code>git init\n</code></pre> <p>1.4: Create README</p> <pre><code>echo \"# Rust Hello Comp 423\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-setup-github","title":"Step 2 Setup GitHub","text":"<p>2.1: Log in to GitHub and head to the Create a New Repository page</p> <p>2.2: Fill in the following:</p> <ul> <li> <p>Repo Name: rust-hello-comp423</p> </li> <li> <p>Description: \"Getting started with Rust - Hello COMP423\"</p> </li> </ul> <p>2.3: Create Repository</p>"},{"location":"tutorials/rust-setup/#step-3-link-github","title":"Step 3 Link GitHub","text":"<p>3.1: Add your GitHub repo as a remote <pre><code>git remote add origin https://github.com/&lt;username&gt;/rust-hello-comp423.git\n</code></pre></p> <p>3.2: Check default branch is named main using subcommand <code>git branch</code>. If it is not, rename it using <code>git branch -M main</code>.</p> <p>3.3: Push local commits to GitHub <pre><code>git push -u origin main\n</code></pre></p>"},{"location":"tutorials/rust-setup/#development-container-setup","title":"Development Container Setup","text":""},{"location":"tutorials/rust-setup/#step-4-configure-development-container","title":"Step 4 Configure Development Container","text":"<p>4.1: Open the <code>rust-hello-comp423</code> directory in VS Code through File &gt; Open Folder</p> <p>4.2: Install the Dev Containers extension for VS Code</p> <p>4.3: Create a <code>.devcontainer</code> directory in the root of your project</p> <p>Note</p> <p>The . in the front of this name indicates the directory is hidden.</p> <p>4.4: Inside the <code>.devcontainer</code> directory, create a <code>.devcontainer/devcontainer.json</code> file</p> <p>Note</p> <p>This file defines the configuration for your development environment including the following:</p> <ul> <li> <p>name: a descriptive name for your development container</p> </li> <li> <p>image: which Docker image to use, for our example we will use the latest version of a Rust environment from Microsoft</p> </li> <li> <p>customizations: add configurations to VS Code such as installing the Rust extension</p> </li> <li> <p>postCreateCommand: a command to run after the container is created</p> </li> </ul> <p>4.5: Use <code>devcontainer.json</code> to configure your development environment with the following information: <pre><code>{\n    \"name\": \"COMP423 Course Notes\",\n    \"image\": \"mcr.microsoft.com/vscode/devcontainers/rust:latest\",\n    \"customizations\": {\n      \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\"rust-lang.rust-analyzer\"]\n      }\n    },\n    \"postCreateCommand\": \"cargo new hello-comp-423 --vcs none --bin\"\n  }\n</code></pre></p> <p>4.6: Reopen the project in a VSCode Dev Container by using the <code>Ctrl+Shift+P</code> shortcut, typing \"Dev Containers: Reopen in Container\" and selecting the option</p> <p>4.7: Check for success!</p> <p>Note</p> <p>Close your current terminal and open a new one. Run <code>rustc --version</code> to check that your dev container is running a recent version of Rust.</p>"},{"location":"tutorials/rust-setup/#finalize-hello-comp423-message","title":"Finalize Hello COMP423 Message","text":""},{"location":"tutorials/rust-setup/#step-5-edit-compile-message","title":"Step 5 Edit &amp; Compile Message","text":"<p>5.1: Open the directory created by <code>cargo new</code> <pre><code>cd hello-comp-423\n</code></pre></p> <p>5.2: Open <code>hello-comp-423/src/main.rs</code> and edit the <code>println!</code> message to say \"Hello COMP423\"</p> <p>5.3: Save changes</p>"},{"location":"tutorials/rust-setup/#build-check-out-your-program","title":"Build &amp; Check Out Your Program","text":""},{"location":"tutorials/rust-setup/#step-6-run-it","title":"Step 6 Run It!","text":"<p>6.1: Compile your program  <pre><code>cargo build\n</code></pre></p> <p>Note</p> <p>Similar to <code>gcc</code> with the `-o' flag used for compiling C programs without running them.</p> <p>6.2: Run your program <pre><code>./target/debug/hello-comp-423\n</code></pre></p> <p>6.3: Put it all in one command <pre><code>cargo run\n</code></pre></p> <p>Note</p> <p>The <code>cargo run</code> command compiles the program and then runs it in just one step!</p>"},{"location":"tutorials/rust-setup/#save-your-work","title":"Save Your Work","text":""},{"location":"tutorials/rust-setup/#step-7-push-to-git","title":"Step 7 Push to Git","text":"<p>7.1: Stage changes  <pre><code>git add .\n</code></pre> 7.2: Commit changes locally  <pre><code>git commit -m \"Hello COMP423 Complete\"\n</code></pre> 7.3: Push changes  <pre><code>git push -u origin\n</code></pre></p> <p>Well Done!</p> <p>Written in part with assistance and inspiration from the COMP423 Starting a Static Website Project with MkDocs webpage.</p>"}]}